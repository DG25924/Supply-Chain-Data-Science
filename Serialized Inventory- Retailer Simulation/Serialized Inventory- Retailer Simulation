
import matplotlib.pyplot as plt, numpy as np, pandas as pd
from queue import PriorityQueue
from collections import defaultdict
from typing import List

class EventWrapper():
    def __init__(self,event):
        self.event = event

    def __it__(self, other):
        return self.event.priority < other.event.priority


class DES():
    def __init__(self, end):
        self.events, self.end, self.time = PriorityQueue(), end, 0

    def start(self):
        while True:
            event =self.events.get()
            self.time =event[0]
            if self.time <= self.end:
                event[1].event.end()
            else:
                break

    def schedule(self, event: EventWrapper, time_lag: int):
        self.events.put((self.time + time_lag, event))


class Warehouse:
    def __init__(self, inventory_level, holding_cost, lead_time):
        self.i, self.h, self.lead_time = inventory_level, holding_cost, lead_time
        self.o = 0#oustanding arrears
        self.period_costs = defaultdict(int) #This dictionary records the costs in each period

    def receive_order(self, Q, time):
        self.review_inventory(time)
        self.i, self.o = self.i +Q , self.o- Q
        self.review_inventory(time)

    def review_inventory(self, time):
        try:
            self.levels.append([time, self.i])
            self.on_hand.append([time, self.on_hand_inventory()])
            self.positions.append([time, self.inventory_position()])
        except AttributeError:
            self.levels, self.on_hand = [[0, self.i]], [[0, self.on_hand_inventory()]]
            self.positions = [[0, self.inventory_position()]]

    def order(self, Q, time):
        self.review_inventory(time)
        self.o += Q
        self.review_inventory(time)

    def on_hand_inventory(self):
        return max(0, self.i)

    def backorders(self):
        return max(0 , -self.i)

    def issue(self, demand, time):
        self.review_inventory(time)
        self.i = self.i - demand

    def inventory_position(self):
        return self.o + self.i

    def incur_end_of_period_costs(self, time):
        self._incur_holding_cost(time)

    def _incur_holding_cost(self, time):
        self.period_costs[time] += self.on_hand_inventory()*self.h


class Retailer:
    def __init__(self, inventory_level, holding_cost, penalty_cost, lead_time, demand_rate):
        self.i, self.h, self.p, self.lead_time, self.demand_rate = inventory_level, holding_cost, penalty_cost, lead_time, demand_rate
        self.o = 0
        self.period_costs = defaultdict(int)


    def receive_order(self, Q, time):
        self.review_inventory(time)
        self.i, self.o = self.i +Q , self.o- Q
        self.review_inventory(time)

    def order(self, Q, time):
        self.review_inventory(time)
        self.o += Q
        self.review_inventory(time)

    def on_hand_inventory(self):
        return max(0, self.i)

    def backorders(self):
        return max(0 , -self.i)  

    def issue(self, demand, time):
        self.review_inventory(time)
        self.i = self.i - demand

    def review_inventory(self, time):
        try:
            self.levels.append([time, self.i])
            self.on_hand.append([time, self.on_hand_inventory()])
            self.positions.append([time, self.inventory_position()])
        except AttributeError:
            self.levels, self.on_hand = [[0, self.i]], [[0, self.on_hand_inventory()]]
            self.positions = [[0, self.inventory_position()]]

    def incur_end_of_period_costs(self, time):
        self._incur_holding_cost(time)
        self._incur_penalty_cost(time)

    def _incur_holding_cost(self, time):
        self.period_costs[time] += self.on_hand_inventory()*self.h

    def _incur_penalty_cost(self, time):
        self.period_costs[time] += self.backorders()* self.p

    def inventory_position(self):
        return self.o + self.i


class CustomerDemand:
    def __init__(self, des:DES, demand_rate: float, retailer: Retailer):
        self.d = demand_rate
        self.r = retailer
        self.des = des
        self.priority = 5

    def end(self):
        self.r.issue(1, self.des.time)
        self.des.schedule(EventWrapper(self)), np.random.exponential(1/self.d)

class EndofPeriod:
    def __init__(self, des:DES, warehouse: Warehouse, retailer: Retailer):
        self.w = warehouse
        self.r = retailer
        self.des = des
        self.priority = 0

    def end(self):
        self.w.incur_end_of_period_costs(self.des.time-1)
        self.r.incur_end_of_period_costs(self.des.time-1)
        self.des.schedule(EventWrapper(EndofPeriod(self.des, self.w, self.r)), 1)

class Orderupto_Warehouse:
    def __init__(self, des:DES, S:float, warehouse:Warehouse, retailer: Retailer):
        self.S = S
        self.w = warehouse
        self.r = retailer
        self.des = des
        self.priority = 1

    def end(self):
        Q = self.S -self.w.inventory_position()
        self.w.order(Q, self.des.time)
        self.des.schedule(EventWrapper(ReceiveOrder_Warehouse(self.des, Q, self.w, self.r)), self.w.lead_time)

class OrderUpto_Retailer:
    def __init__(self, des:DES, S:float, warehouse: Warehouse, retailer: Retailer):
        self.S = S
        self.w = warehouse
        self.r = retailer
        self.des = des
        self.priority = 2

    def end(self):
        Q = self.S - self.r.inventory_position()
        self.r.order(Q, self.des.time)
        Q_available = min(Q, self.w.on_hand_inventory)
        self.w.issue(Q, self.des.time)
        self.des.schedule(EventWrapper(ReceiveOrder_Retailer(self.des, Q_available, self.r)), self.r.lead_time)

class ReceiveOrder_Warehouse:
    def __init__(self, des: DES, Q:float, warehouse: Warehouse, retailer: Retailer):
        self.Q = Q
        self.w = warehouse
        self.r = retailer
        self.des = des
        self.priority = 3

    def end(self):
        backorders = self.w.backorders()
        self.w.receive_order(self.Q, self.des.time)
        if backorders> 0:
            q = min(self.Q, backorders)
            self.des.schedule(EventWrapper(ReceiveOrder_Retailer(self.des, q, self.r)), self.r.lead_time)

class ReceiveOrder_Retailer:
    def __init__(self, des:DES, Q:float, retailer:Retailer):
        self.Q = Q
        self.r = retailer
        self.des = des
        self.priority = 4

    def end(self):
        self.r.receive_order(self.Q, self.des.time)



def simulate(retailer, S_r, warehouse, S_w, N):
    np.random.seed(1234)
    r, w = Retailer(**retailer), Warehouse(**warehouse)

    des = DES(N)
    d = CustomerDemand(des, r.demand_rate, r)
    des.schedule(EventWrapper(d), 0)

    o_r = OrderUpto_Retailer(des, S_r, w,r)
    o_w = Orderupto_Warehouse(des, S_w, w, r)
    for t in range(N):
        des.schedule(EventWrapper(o_r), t)
        des.schedule(EventWrapper(o_w), t)
        
    des.schedule(EventWrapper(EndofPeriod(des, w, r)), 1)
    des.start()

    tc = sum([w.period_costs[e] for e in w.period_costs]) + sum([r.period_costs[e] for e in r.period_costs])
    return tc/N

N = 10000

S_r, S_w = 74, 59

retailer = {"inventory_level": S_r, "holding_cost": 1.5, "penalty_cost": 10, "lead_time": 5, "demand_rate": 10}

warehouse = {"inventory_level":S_w, "holding_cost":1, "lead_time": 5}
print("Avg cost per period:" + '%2f' %simulate(retailer, S_r, warehouse, S_w, N))





